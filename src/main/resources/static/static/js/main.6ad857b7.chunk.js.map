{"version":3,"sources":["views/Dashboard/Dashboard.module.css","components/label/switch/LabelSwitch.module.css","components/label/editable/EditableLabel.module.css","utils/backendCalls.ts","components/label/switch/LabelSwitch.tsx","components/label/editable/EditableLabel.tsx","views/Pins/PinView.tsx","views/Pins/PinViewModal.tsx","components/overlay/modal/OverlayModal.tsx","views/Schema/SchemaView.tsx","views/Dashboard/DashboardView.tsx","views/Login/LoginView.tsx","views/Login/PrivateRoute.tsx","routing.tsx","views/GenericView/GenericView.tsx","utils/registerServiceWorker.ts","index.tsx"],"names":["module","exports","notFound","schemaHeading","switch","disabledSwitch","input","backendCalls","BackendCalls","prototype","getPins","then","error","schema","this","callGraphql","undefined","e","pins","sort","f","g","id","getPinModes","pinmodes","editPins","name","setPinDefaultState","state","getSchemas","active","toLowerCase","createSchema","map","pin","mode","activateSchema","editSchema","editSchemaName","deleteSchema","login","user","password","document","cookie","isLoggedIn","getCookieValue","a","b","match","value","pop","deleteCookie","body","_this","fetch","method","JSON","stringify","query","headers","Headers","Content-Type","Authorization","r","json","response","errors","message","window","history","pushState","data","catch","err","switch_LabelSwitch","_super","LabelSwitch","props","context","call","index","defaultindex","disabled","onSave","bind","onClick","tslib_es6","render","react","title","tooltip","className","LabelSwitch_module_default","onMouseOut","switchlist","setState","length","onChange","editable_EditableLabel","EditableLabel","defaultvalue","EditableLabel_module_default","target","onKeyPress","onBlur","onSumbit","which","blur","Pins_PinView","PinView","backend","console","saveName","reactstrap_es","filter","key","saveDefaultState","toastr","onError","Pins_PinViewModal","PinViewModal","modified","convertToDefaultMode","componentWillReceiveProps","nextProps","nextContext","saveNow","text","saveState","list","x","splice","findIndex","push","modal_OverlayModal","OverlayModal","modal","toggle","buttonLabel","isOpen","children","color","onSubmit","submitText","cancelText","views_Schema_SchemaView","SchemaView","hoverindex","schemaname","saveNewSchema","saveEditedPins","placeholder","Row_default","Dashboard_module_default","setSchemaActive","trim","Dashboard_DashboardView","DashboardView","modepins","Login_LoginView","LoginView","handleNavbar","Redirect","to","required","type","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","show","getElementById","setAttribute","preventDefault","stopPropagation","currentTarget","checkValidity","PrivateRoute","_a","Component","component","rest","Route","es_Redirect","pathname","from","location","routing","Routing","BrowserRouter","style","minHeight","Switch","exact","path","views_GenericView_GenericView","GenericView","light","expand","Link","navbar","Nav_default","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","react_dom","URL","toString","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ad857b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFound\":\"Dashboard_notFound__1qL1D\",\"schemaHeading\":\"Dashboard_schemaHeading__34UYH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"LabelSwitch_switch__1K3Vg\",\"disabledSwitch\":\"LabelSwitch_disabledSwitch__1stGN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableLabel_input__1OQfg\"};","import {Mode} from \"../views/Pins/PinViewModal\"\n\nclass BackendCalls {\n\n    public getPins(then: (response: any) => void, error: (e: string) => void, schema?: number) {\n        this.callGraphql(`\nquery{\n\tpins` + (schema === undefined ? \"\" : \"(schema:\" + schema + \")\") + `{\n\t\tid\n\t\tname\n\t\tdefault:defaultActive\n\t}\n}\n`, (e: any) => then(e.pins.sort((f: any, g: any) => f.id > g.id ? 1 : -1)), error)\n    }\n\n    public getPinModes(then: (response: any) => void, error: (e: string) => void, schema: number) {\n        this.callGraphql(`\nquery{\n  schema(id:` + schema + `){\n    id\n    pinmodes:pins{\n      mode\n      pin{\n        id\n        name\n      }\n    }\n  }\n}\n`, (e: any) => then(e.schema[0].pinmodes.sort((f: any, g: any) => f.id > g.id ? 1 : -1)), error)\n    }\n\n    public editPins(id: number, name: string, then: (response: any) => void, error: (e: string) => void) {\n        this.callGraphql(`mutation{\n  editPin(id:` + id + `, name:\"` + name + `\"){\n    id\n    name\n  }\n}`, then, error)\n    }\n\n    public setPinDefaultState(id: number, state: boolean, then: (response: any) => void, error: (e: string) => void) {\n        this.callGraphql(`mutation{\n  setPinDefaultState(id:` + id + `, mode:` + state + `){\n    id\n    name\n  }\n}`, then, error)\n    }\n\n    public getSchemas(then: (response: any) => void, error: (e: string) => void, active?: boolean) {\n        this.callGraphql(`\nquery{\nschema` + (active ? \"(active:true)\" : \"\") + `{\n\tname\n\tid\n\tactive\n\t` + (active ? `pins{\n      mode\n      pin{\n        id\n        name\n      }\n    }` : '') + `\n}\n}\n`, (e: any) => then(e.schema.sort((f: any, g: any) => f.name.toLowerCase() > g.name.toLowerCase() ? 1 : -1)), error)\n    }\n\n    public createSchema(name: string, pins: [Mode], then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n  schema:createSchema(\n    name:\"` + name + `\"\n    mode:[` + (pins.map(e => \"{pinid:\" + e.pin.id + \",mode:\" + e.mode + \"}, \")) + `]\n  ){\n    name\n  }\n}\n`, then, error)\n    }\n\n    public activateSchema(id: number, then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n activateSchema(id:` + id + `){\n  name\n  id\n  active\n}\n}\n`, then, error)\n    }\n\n    public editSchema(id: number, name: string, pins: [Mode], then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n  schema:editSchema(\n    id:` + id + `\n    name:\"` + name + `\"\n    mode:[` + (pins.map(e => \"{pinid:\" + e.pin.id + \",mode:\" + e.mode + \"}, \")) + `]\n  ){\n    name\n  }\n}\n`, then, error)\n    }\n\n    public editSchemaName(id: number, name: string, then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n  schema:editSchemaName(\n    id:` + id + `\n    name:\"` + name + `\"\n  ){\n    name\n  }\n}\n`, then, error)\n    }\n\n    public deleteSchema(id: number, then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n  deleteSchema(id:` + id + `){\n    name\n    id\n  }\n}\n`, then, error)\n    }\n\n    public login(user: string, password: string, then: () => void, error: (e: string) => void) {\n        this.callGraphql(`\nmutation{\n login(user:\"` + user + `\", password:\"` + password + `\")\n}\n`, (e: { login: string }) => {\n            document.cookie = \"session=\" + e.login + \"; expires=0; path=/\"\n            then()\n        }, error)\n    }\n\n    public isLoggedIn(): boolean {\n        return this.getCookieValue(\"session\") !== null\n    }\n\n    private getCookieValue(a: string): string | null {\n        const b = document.cookie.match('(^|;)\\\\s*' + a + '\\\\s*=\\\\s*([^;]+)')\n        if (b) {\n            const value = b.pop()\n            return value === \"null\" ? null : value!\n        }\n        return null\n    }\n\n    private deleteCookie(name: string) {\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;'\n    }\n\n    private callGraphql(body: string, then: (response: any) => void, error: (err: string) => void) {\n        fetch('http://localhost:9000/graphql', {\n            method: 'post',\n            body: JSON.stringify({\"query\": body}),\n            headers: new Headers({'Content-Type': 'application/json', 'Authorization': 'Bearer ' + this.getCookieValue(\"session\")})\n        }).then((r) => r.json()).then((response) => {\n            // console.log(response)\n            if (response.errors !== undefined) {\n\n                if (response.errors[0].message === \"Permission not granted\") {\n                    this.deleteCookie(\"session\")\n                    window.history.pushState({}, '', '/login')\n                } else {\n                    error(response.errors[0].message)\n                }\n            } else {\n                then(response.data)\n            }\n        }).catch((err: Error) => error(err.message))\n    }\n\n}\n\n\nexport default BackendCalls\n","import * as React from 'react'\nimport styles from './LabelSwitch.module.css'\n\nclass LabelSwitch extends React.Component<EditableLabelProps, EditableLabelStats> {\n\n    constructor(props: EditableLabelProps, context: any) {\n        super(props, context)\n\n        this.state = {index: props.defaultindex || 0, defaultindex: props.defaultindex || 0, disabled: (this.props.disabled !== undefined && this.props.disabled)}\n        this.onSave = this.onSave.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    public render() {\n        return <div title={this.state.disabled ? \"\" : (this.props.tooltip || \"\")} onClick={this.onClick} className={this.state.disabled ? styles.disabledSwitch : styles.switch}\n                    onMouseOut={this.onSave}>{this.props.switchlist[this.state.index][0]}</div>\n    }\n\n    private onClick(e: any) {\n        if (!this.state.disabled) {\n            this.setState({index: this.state.index + 1 < this.props.switchlist.length ? this.state.index + 1 : 0})\n        }\n    }\n\n    private onSave() {\n        if ((!this.state.disabled) && this.state.index !== this.state.defaultindex) {\n            this.setState({defaultindex: this.state.index})\n            this.props.onChange(this.props.switchlist[this.state.index][1])\n        }\n    }\n}\n\ninterface EditableLabelProps {\n    tooltip?: string\n    disabled?: boolean\n    defaultindex?: number\n    switchlist: Array<[string, any]>\n    onChange: (value: string) => void\n}\n\n\ninterface EditableLabelStats {\n    index: number\n    disabled: boolean\n    defaultindex: number\n}\n\nexport default LabelSwitch","import * as React from 'react'\nimport styles from './EditableLabel.module.css'\n\nclass EditableLabel extends React.Component<EditableLabelProps, EditableLabelStats> {\n\n\n    constructor(props: EditableLabelProps, context: any) {\n        super(props, context)\n        this.state = {value: props.value || \"\", defaultvalue: props.value || \"\"}\n        this.onChange = this.onChange.bind(this)\n    }\n\n    public render() {\n        if (this.props.disabled) {\n            return <div className={styles.input}>{this.state.value} </div>\n        }\n        return <input className={styles.input} value={this.state.value} onChange={(e: any) => this.setState({value: e.target.value})\n        } onKeyPress={this.onChange} onBlur={e => {\n            if (this.state.defaultvalue !== e.target.value) {\n                this.setState({defaultvalue: e.target.value})\n                this.props.onSumbit(e.target.value)\n            }\n        }}/>\n    }\n\n\n    private onChange(e: any) {\n        if (e.which === 9 || e.which === 13) {\n            e.target.blur()\n        }\n    }\n}\n\ninterface EditableLabelProps {\n    value?: string\n    disabled?: boolean\n    onSumbit: (value: string) => void\n}\n\n\ninterface EditableLabelStats {\n    value: string\n    defaultvalue: string\n}\n\nexport default EditableLabel","import * as React from 'react'\nimport * as toastr from 'toastr'\nimport {Container, Table, Row} from 'reactstrap'\nimport BackendCalls from '../../utils/backendCalls'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\n\nclass PinView extends React.Component<PinViewProps, PinViewStats> {\n\n    private backend: BackendCalls;\n\n    public constructor(props: PinViewProps) {\n        super(props)\n\n        this.state = {pins: [undefined]}\n\n        this.backend = new BackendCalls()\n        this.backend.getPins((e: any) => this.setState({pins: e}), (err: any) => console.error(err))\n        this.saveName = this.saveName.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <br/>\n            <h1>Pins</h1>\n            <br/>\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Default Setting</th>\n                    </tr>\n\n                    {this.state.pins!.filter((e: any) => e !== undefined && e !== null).map((e: Pins) => <tr key={e.id}>\n                        <td>{e.id}</td>\n                        <td><EditableLabel value={e.name} onSumbit={(g: string) => this.saveName(e.id, g)}/></td>\n                        <td>{<LabelSwitch tooltip={\"Click to change\"} switchlist={[[\"Active\", \"true\"], [\"Deactivated\", \"false\"]]}\n                                          onChange={(g: string) => this.saveDefaultState(e.id, g)}/>}</td>\n                    </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private saveName(id: number, value: string) {\n        this.backend.editPins(id, value, () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n    private onError(e: string) {\n        toastr.error(\"Change could not be made permanently. \" + e)\n    }\n\n    private saveDefaultState(id: number, value: string) {\n        this.backend.setPinDefaultState(id, value === \"true\", () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n}\n\ninterface PinViewProps {\n    pins?: [any]\n}\n\ninterface Pins {\n    id: number\n    name: string\n    default: number\n\n}\n\ninterface PinViewStats {\n    pins?: [any]\n}\n\nexport default PinView","import * as React from 'react'\nimport * as toastr from \"toastr\"\nimport {Container, Table, Row} from 'reactstrap'\nimport BackendCalls from '../../utils/backendCalls'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\n\nclass PinViewModal extends React.Component<PinViewProps, PinViewStats> {\n\n    private backend: BackendCalls\n\n    constructor(props: PinViewProps) {\n        super(props)\n\n        this.backend = new BackendCalls()\n\n        this.state = {pins: [undefined], modified: false}\n\n        if (props.schema) {\n            this.backend.getPinModes((e: any) => this.setState({pins: e}), this.onError, props.schema)\n        } else {\n            // @ts-ignore\n            this.backend.getPins((e: Pin[]) => this.setState({pins: this.convertToDefaultMode(e)}), this.onError)\n        }\n    }\n\n\n    public componentWillReceiveProps(nextProps: Readonly<PinViewProps>, nextContext: any): void {\n        if (nextProps.saveNow && this.state.modified) {\n            this.setState({modified: false})\n            this.props.onSave(this.props.schema!, this.state.pins!)\n        }\n    }\n\n\n    public render() {\n        return <Container>\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Pinnumber</th>\n                        <th>Name</th>\n                        <th>Setting</th>\n                    </tr>\n\n                    {this.state.pins!.filter((e: any) => e !== undefined && e !== null).sort((a: Mode, b: Mode) => a.pin.id > b.pin.id ? 1 : -1).map((e: Mode) =>\n                        <tr key={e.pin.id}>\n                            <td>{e.pin.id}</td>\n                            <td>{e.pin.name}</td>\n                            <td>{<LabelSwitch defaultindex={e.mode} tooltip={\"Click to change\"} switchlist={[[\"deactivated\", \"0\"], [\"active\", \"1\"], [\"unmodified\", \"2\"]]}\n                                              onChange={(text: string) => this.saveState(e.pin.id, text)}/>}</td>\n                        </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private convertToDefaultMode(pins: [Pin]): Mode[] {\n        const list = []\n\n        for (let x = 0; x < pins.length; x++) {\n            list[x] = {mode: 2, pin: pins[x]}\n        }\n\n        return list\n    }\n\n    private saveState(id: number, value: string) {\n        const pins: [Mode] = this.state.pins!\n        const pin: Pin = pins!.splice(pins!.findIndex((e: Mode) => e.pin.id === id), 1)[0].pin\n\n        pins!.push({mode: +value, pin})\n        this.setState({pins, modified: true})\n    }\n\n    private onError(e: string) {\n        console.error(e)\n        toastr.error(\"Change could not be made permanently. \" + e)\n    }\n\n}\n\ninterface PinViewProps {\n    pins?: [any]\n    schema?: number\n    saveNow: boolean\n    onSave: (schema: number, pins: [any]) => void\n}\n\nexport interface Mode {\n    mode: number\n    pin: Pin\n}\n\ninterface Pin {\n    id: number\n    name: string\n    state: number\n\n}\n\ninterface PinViewStats {\n    pins?: [any]\n    modified: boolean\n}\n\nexport default PinViewModal","import * as React from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, ButtonGroup} from 'reactstrap';\n\nclass OverlayModal extends React.Component<ModalProps, ModalStats> {\n    public constructor(props: ModalProps) {\n        super(props)\n        this.state = {modal: false}\n\n        this.toggle = this.toggle.bind(this)\n    }\n\n    public render() {\n        return (\n            <div>\n                <div className={this.props.className} onClick={this.toggle}>{this.props.buttonLabel}</div>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>{this.props.title}</ModalHeader>\n                    <ModalBody>\n                        {this.props.children}\n                    </ModalBody>\n                    <ModalFooter>\n                        <ButtonGroup>\n                            <Button color=\"primary\" onClick={() => {\n                                this.toggle()\n                                this.props.onSubmit()\n                            }}>{this.props.submitText || \"Ok\"}</Button>\n                            <Button color=\"secondary\" onClick={this.toggle}>{this.props.cancelText || \"Cancel\"}</Button>\n                        </ButtonGroup>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n\n    private toggle() {\n        this.setState({modal: !this.state.modal})\n    }\n\n}\n\ninterface ModalProps {\n    title: string\n    buttonLabel: string\n    className?: string\n    cancelText?: string\n    submitText?: string\n    onSubmit: () => void\n}\n\ninterface ModalStats {\n    modal: boolean\n}\n\nexport default OverlayModal","import './SchemaView.css'\nimport * as React from 'react'\nimport * as toastr from 'toastr'\nimport Row from 'reactstrap/lib/Row'\nimport {Container, Table} from 'reactstrap'\nimport BackendCalls from '../../utils/backendCalls'\nimport styles from \"../Dashboard/Dashboard.module.css\"\nimport PinViewModal, {Mode} from '../Pins/PinViewModal'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport OverlayModal from '../../components/overlay/modal/OverlayModal'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\n\nclass SchemaView extends React.Component<{}, PinViewStats> {\n    private backend: BackendCalls\n\n    constructor(props: {}) {\n        super(props)\n        this.backend = new BackendCalls()\n\n        this.state = {schema: undefined, hoverindex: -1, saveNow: false, schemaname: \"\"}\n\n        this.getSchemas()\n        this.getSchemas = this.getSchemas.bind(this)\n        this.saveName = this.saveName.bind(this)\n        this.saveNewSchema = this.saveNewSchema.bind(this)\n        this.saveEditedPins = this.saveEditedPins.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <h1 className={\"h1\"}>Schemas</h1>\n            <div className={\"text-right\"}>\n                <OverlayModal className={\"btn btn-primary add-button\"} title={\"Add a new schema\"} buttonLabel={\"Add schema\"} onSubmit={() => this.setState({saveNow: true})}>\n\n                    <input placeholder={\"Name\"} className={\"form-control\"} onChange={(e: any) => this.setState({schemaname: e.target.value})}/>\n                    <PinViewModal saveNow={this.state.saveNow} onSave={this.saveNewSchema}/>\n                </OverlayModal></div>\n            <Row>{(this.state.schema === undefined || this.state.schema.length < 1) ? <div className={styles.notFound}>No schemas found</div> : <div className={\"w-100\"}>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Setting</th>\n                        <th/>\n                        <th/>\n                    </tr>\n\n                    {this.state.schema.map((e: Schema) =>\n                        <tr key={e.id} className={\"schemaview\"}>\n                            <td>{e.id}</td>\n                            <td><EditableLabel value={e.name} onSumbit={(g: string) => this.saveName(e.id, g)}/></td>\n                            <td><LabelSwitch disabled={e.active} key={e.active + \"\"} defaultindex={e.active ? 0 : 1} tooltip={\"Click to change\"} switchlist={[[\"Active\", true], [\"Deactivated\", false]]}\n                                             onChange={(g: string) => this.setSchemaActive(e.id, g)}/></td>\n                            <td className={\"text-right\"}>\n\n                                <OverlayModal className={\"btn btn-danger hoverbutton float-right radius-right\"} submitText={\"Yes\"} title={\"Delete the following element?\"}\n                                              buttonLabel={\"Delete\"} onSubmit={() => this.deleteSchema(e.id)}>\n                                    <h3>{e.name}</h3>\n                                </OverlayModal>\n                                <OverlayModal className={\"btn btn-warning hoverbutton float-right radius-left\"} title={e.name} buttonLabel={\"Edit\"}\n                                              onSubmit={() => this.setState({saveNow: true})} submitText={\"Save\"}>\n                                    <PinViewModal schema={e.id} saveNow={this.state.saveNow} onSave={this.saveEditedPins}/>\n                                </OverlayModal>\n                            </td>\n                        </tr>)}\n                    </tbody>\n                </Table></div>}\n            </Row>\n        </Container>\n    }\n\n    private getSchemas() {\n        this.backend.getSchemas((e: any) => this.setState({schema: e}), this.onError)\n    }\n\n    private saveNewSchema(schema: number, pins: [Mode]) {\n        if (this.state.schemaname.trim().length === 0) {\n            toastr.error(\"The schema name needs to be set.\")\n            return\n        }\n\n        this.setState({saveNow: false})\n        this.backend.createSchema(this.state.schemaname, pins, () => {\n            toastr.success(\"The changes have successfully been saved.\")\n            this.getSchemas()\n        }, this.onError)\n    }\n\n    private saveName(id: number, value: string) {\n        this.backend.editSchemaName(id, value, () => {\n            toastr.success(\"The schema was successfully updated.\")\n            this.getSchemas()\n        }, this.onError)\n    }\n\n    private setSchemaActive(id: number, value: string) {\n        if (value) {\n            this.backend.activateSchema(id, () => {\n                toastr.success(\"The schema was successfully activated.\")\n                this.getSchemas()\n            }, this.onError)\n        }\n\n    }\n\n    private deleteSchema(id: number) {\n        this.backend.deleteSchema(id, () => {\n            toastr.success(\"The schema was successfully deleted.\")\n            this.getSchemas()\n        }, this.onError)\n    }\n\n    private saveEditedPins(schema: number, pins: [Mode]) {\n        this.backend.editSchema(schema, this.state.schema![0].name, pins, () => {\n            toastr.success(\"The schema was successfully updated.\")\n            this.getSchemas()\n        }, this.onError)\n    }\n\n    private onError(e: string) {\n        toastr.error(\"Couldn't save changes. \" + e)\n    }\n\n}\n\ninterface Schema {\n    id: number\n    name: string\n    active: boolean\n}\n\ninterface PinViewStats {\n    schema: [Schema] | undefined\n    saveNow: boolean\n    schemaname: string\n    hoverindex: number\n}\n\nexport default SchemaView","import * as React from 'react'\nimport * as toastr from 'toastr'\nimport {Mode} from \"../Pins/PinViewModal\"\nimport styles from \"./Dashboard.module.css\"\nimport {Container, Table, Row} from 'reactstrap'\nimport BackendCalls from '../../utils/backendCalls'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\n\nclass DashboardView extends React.Component<{}, PinViewStats> {\n\n    private backend: BackendCalls\n\n    public constructor(props: {}) {\n        super(props)\n\n        this.state = {modepins: undefined, name: \"\"}\n\n        this.backend = new BackendCalls()\n        this.backend.getSchemas((e: [Schema]) => this.setState({name: e.length < 1 ? \"\" : e[0].name, modepins: e.length < 1 ? undefined : e[0].pins}), this.onError, true)\n        this.saveName = this.saveName.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <Row>\n                {!this.state.modepins ? <div className={styles.notFound}>No active schema found</div> : <div className={\"w-100\"}>\n                    <div className={styles.schemaHeading}>Active schema {this.state.name}</div>\n                    <Table>\n                        <tbody>\n                        <tr>\n                            <th>Pinnumber</th>\n                            <th>Name</th>\n                            <th>Setting</th>\n                        </tr>\n\n                        {this.state.modepins.sort((e: Mode, x: Mode) => e.pin.id > x.pin.id ? 1 : -1).map((e: Mode) => <tr key={e.pin.id}>\n                            <td>{e.pin.id}</td>\n                            <td><EditableLabel disabled={true} value={e.pin.name} onSumbit={() => null}/></td>\n                            <td><LabelSwitch defaultindex={e.mode === 0 ? 1 : 0} disabled={true} switchlist={[[\"Active\", \"true\"], [\"Deactivated\", \"false\"]]} onChange={() => null}/>\n                            </td>\n                        </tr>)}\n                        </tbody>\n                    </Table></div>}\n            </Row>\n        </Container>\n    }\n\n    private saveName(id: number, value: string) {\n        this.backend.editPins(id, value, () => toastr.success(\"The changes have been successfully saved.\"), this.onError)\n    }\n\n    private onError(e: string) {\n        toastr.error(\"Change could not be made permanently. \" + e)\n    }\n\n}\n\ninterface Schema {\n    id: string\n    pins: [Mode]\n    name: string\n    active: boolean\n}\n\ninterface PinViewStats {\n    modepins: [Mode] | undefined\n    name: string\n}\n\nexport default DashboardView","import * as React from \"react\"\nimport {Redirect} from \"react-router\"\nimport './Login.css'\nimport {FormEvent} from \"react\"\nimport BackendCalls from \"../../utils/backendCalls\"\nimport * as toastr from \"toastr\"\n\nclass LoginView extends React.Component<{}, LoginState> {\n    private backend: BackendCalls\n\n    constructor(props: Readonly<{}>) {\n        super(props)\n        this.backend = new BackendCalls()\n        this.login = this.login.bind(this)\n        this.state = {isLoggedIn: this.backend.isLoggedIn()}\n    }\n\n    public render() {\n        if (this.state.isLoggedIn) {\n            this.handleNavbar(false)\n            return <Redirect to={\"/\"}/>\n        }\n\n        return (\n            <div id=\"LoginForm\">\n                <div className=\"container\">\n                    <h1 className=\"form-heading\">Login</h1>\n                    <div className=\"login-form\">\n                        <div className=\"main-div\">\n                            <form id=\"Login\" onSubmit={this.login}>\n                                <div className=\"form-group\">\n                                    <input required={true} className=\"form-control\" id=\"inputEmail\" placeholder=\"User\"/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <input required={true} type=\"password\" className=\"form-control\" id=\"inputPassword\" placeholder=\"Password\"/>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">Login</button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    public componentDidMount(): void {\n        this.handleNavbar(this.state.isLoggedIn)\n    }\n\n    public componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<LoginState>, snapshot?: any): void {\n        this.setState({isLoggedIn: this.backend.isLoggedIn()})\n        this.handleNavbar(this.state.isLoggedIn)\n    }\n\n    private handleNavbar(show: boolean) {\n        document.getElementById('navbar')!.setAttribute(\"style\", \"display:\" + (show ? \"visible\" : \"none\"))\n\n    }\n\n    private login(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        e.stopPropagation()\n        e.currentTarget.checkValidity()\n\n        this.backend.login((e.currentTarget[0] as HTMLInputElement).value, (e.currentTarget[1] as HTMLInputElement).value,\n            () => this.setState({isLoggedIn: true}), this.onError)\n    }\n\n    private onError(e: string) {\n        toastr.error(\"Couldn't save changes. \" + e)\n    }\n}\n\ninterface LoginState {\n    isLoggedIn: boolean\n}\n\nexport default LoginView","import * as React from \"react\"\nimport {Redirect, Route, RouteComponentProps, RouteProps} from \"react-router-dom\"\nimport BackendCalls from \"../../utils/backendCalls\";\n\ntype RouteComponent = React.StatelessComponent<RouteComponentProps<{}>> | React.ComponentClass<any>\n\nexport const PrivateRoute: React.StatelessComponent<RouteProps> = ({component, ...rest}) => {\n    const renderFn = (Component?: RouteComponent) => (props: RouteProps) => {\n        if (!Component) {\n            return null\n        }\n\n        if (new BackendCalls().isLoggedIn()) {\n            // @ts-ignore\n            return <Component  {...props} />\n        }\n\n        return <Redirect to={{pathname: \"/login\", state: {from: props.location}}}/>\n    }\n\n    return <Route {...rest} render={renderFn(component)}/>\n}\n\n","import * as React from \"react\"\nimport PinView from './views/Pins/PinView'\nimport SchemaView from './views/Schema/SchemaView'\nimport DashboardView from './views/Dashboard/DashboardView'\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\nimport LoginView from \"./views/Login/LoginView\";\nimport {PrivateRoute} from \"./views/Login/PrivateRoute\";\n\nclass Routing extends React.Component<{}, {}> {\n    public render() {\n        return <Router>\n            <div style={{minHeight: \"100vh\"}}>\n                {this.props.children}\n                <Switch>\n                    <PrivateRoute exact={true} path=\"/\" component={DashboardView}/>\n                    <PrivateRoute exact={true} path={\"/pins\"} component={PinView}/>\n                    <PrivateRoute exact={true} path={\"/schema\"} component={SchemaView}/>\n                    <Route exact={true} path=\"/login\" component={LoginView}/>\n                    <Route component={LoginView}/>\n                </Switch>\n            </div>\n        </Router>\n    }\n\n}\n\nexport default Routing\n","import './MainStyle.css'\nimport * as React from 'react'\nimport {Link} from 'react-router-dom'\nimport Routing from '../../routing'\nimport Nav from 'reactstrap/lib/Nav'\nimport {Collapse, Navbar, NavbarToggler, NavItem} from 'reactstrap'\n\nclass GenericView extends React.Component<{}, GenericViewStats> {\n    public constructor(props: any) {\n        super(props)\n\n        this.toggle = this.toggle.bind(this)\n        this.state = {isOpen: false}\n    }\n\n    public render() {\n        return (\n            <Routing>\n                <div id={\"navbar\"}>\n                    <Navbar color=\"primary\" light={true} expand=\"md\">\n                        <Link className={\"navbar-brand\"} to=\"/\">HeizungsPi</Link>\n                        <NavbarToggler onClick={this.toggle}/>\n\n                        <Collapse isOpen={this.state.isOpen} navbar={true}>\n                            <Nav className=\"ml-auto\" navbar={true}>\n                                <NavItem>\n                                    <Link className={\"nav-link\"} to=\"/pins\">Pins</Link>\n                                </NavItem>\n                                <NavItem>\n                                    <Link className={\"nav-link\"} to=\"/schema\">Schema</Link>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Navbar>\n                </div>\n            </Routing>\n        )\n    }\n\n    private toggle() {\n        this.setState({isOpen: !this.state.isOpen})\n    }\n\n}\n\n\ninterface GenericViewStats {\n    isOpen: boolean\n}\n\nexport default GenericView\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './assets/toastr.min.css'\nimport './assets/bootstrap.min.css'\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport GenericView from './views/GenericView/GenericView'\nimport registerServiceWorker from './utils/registerServiceWorker'\n\nReactDOM.render(<GenericView/>, document.getElementById('root') as HTMLElement)\nregisterServiceWorker()\n"],"sourceRoot":""}