{"version":3,"sources":["components/label/editable/EditableLabel.module.css","components/label/switch/LabelSwitch.module.css","utils/registerServiceWorker.ts","components/label/editable/EditableLabel.tsx","components/label/switch/LabelSwitch.tsx","utils/backendCalls.ts","views/Pins/PinView.tsx","components/overlay/modal/OverlayModal.tsx","views/Pins/PinViewModal.tsx","views/Schema/SchemaView.tsx","views/Dashboard/DashboardView.tsx","routing.tsx","views/GenericView.tsx","index.tsx"],"names":["module","exports","input","switch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","editable_EditableLabel","_super","EditableLabel","props","context","_this","call","this","value","defaultvalue","onChange","bind","tslib_es6","prototype","render","react","className","EditableLabel_module_default","a","e","setState","target","onKeyPress","onBlur","onSumbit","which","blur","switch_LabelSwitch","LabelSwitch","index","defaultindex","onSave","onClick","title","tooltip","LabelSwitch_module_default","onMouseOut","switchlist","length","backendCalls","BackendCalls","getPins","schema","callGraphql","pins","sort","f","g","id","editPins","name","setPinDefaultState","getSchemas","body","fetch","method","headers","Headers","Content-Type","JSON","stringify","query","response","json","err","Pins_PinView","PinView","undefined","backend","saveName","reactstrap_es","Row_default","filter","map","key","saveDefaultState","toastr","onError","message","modal_OverlayModal","OverlayModal","modal","toggle","buttonLabel","isOpen","children","color","onSubmit","submitText","cancelText","Pins_PinViewModal","PinViewModal","modified","componentWillReceiveProps","nextProps","nextContext","saveNow","b","saveState","pin","splice","findIndex","push","views_Schema_SchemaView","SchemaView","hoverindex","newPinSchema","saveNewSchema","placeholder","i","deleteSchema","saveEditedPins","Dashboard_DashboardView","DashboardView","routing","Routing","BrowserRouter","Route","exact","path","component","About","Topics","Link","to","url","params","views_GenericView","GenericView","light","expand","href","navbar","Nav_default","react_dom","document","getElementById","URL","toString","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d64787ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableLabel_input__2MCX0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"LabelSwitch_switch__aiIPQ\"};","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport styles from './EditableLabel.module.css'\n\nclass EditableLabel extends React.Component<EditableLabelProps, EditableLabelStats> {\n\n\n    constructor(props: EditableLabelProps, context: any) {\n        super(props, context)\n        this.state = {value: props.value || \"\", defaultvalue: props.value || \"\"}\n        this.onChange = this.onChange.bind(this)\n    }\n\n    public render() {\n        return <input className={styles.input} value={this.state.value} onChange={(e: any) => this.setState({value: e.target.value})\n        } onKeyPress={this.onChange} onBlur={e => {\n            if (this.state.defaultvalue !== e.target.value) {\n                this.setState({defaultvalue: e.target.value})\n                this.props.onSumbit(e.target.value)\n            }\n        }}/>\n    }\n\n\n    private onChange(e: any) {\n        if (e.which === 9 || e.which === 13) {\n            e.target.blur()\n        }\n    }\n}\n\ninterface EditableLabelProps {\n    value?: string\n    onSumbit: (value: string) => void\n}\n\n\ninterface EditableLabelStats {\n    value: string\n    defaultvalue: string\n}\n\nexport default EditableLabel","import * as React from 'react'\nimport styles from './LabelSwitch.module.css'\n\nclass LabelSwitch extends React.Component<EditableLabelProps, EditableLabelStats> {\n\n    constructor(props: EditableLabelProps, context: any) {\n        super(props, context)\n\n        this.state = {index: props.defaultindex || 0, defaultindex: props.defaultindex || 0}\n        this.onSave = this.onSave.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    public render() {\n        return <div title={this.props.tooltip} onClick={this.onClick} className={styles.switch} onMouseOut={this.onSave}>{this.props.switchlist[this.state.index][0]}</div>\n    }\n\n    private onClick(e: any) {\n        this.setState({index: this.state.index + 1 < this.props.switchlist.length ? this.state.index + 1 : 0})\n    }\n\n    private onSave() {\n        if (this.state.index !== this.state.defaultindex) {\n            this.setState({defaultindex: this.state.index})\n            this.props.onChange(this.props.switchlist[this.state.index][1])\n        }\n    }\n}\n\ninterface EditableLabelProps {\n    tooltip?: string\n    defaultindex?: number\n    switchlist: string[][]\n    onChange: (value: string) => void\n}\n\n\ninterface EditableLabelStats {\n    index: number\n    defaultindex: number\n}\n\nexport default LabelSwitch","class BackendCalls {\n\n    public getPins(then: (response: any) => void, error: (e: any) => void, schema?: number) {\n\n        let schemafilter = schema !== undefined ? \"(id:\" + schema + \")\" : \"\"\n\n        console.log(\"Remoe this workaround\")\n        // this is here because the backend does not find the pins of the schemas\n        schemafilter = \"\"\n\n        this.callGraphql(`\nquery{\n\tpins` + schemafilter + `{\n\t\tid\n\t\tname\n\t}\n}\n`, (e: any) => then(e.pins.sort((f: any, g: any) => f.id > g.id ? 1 : -1)), error);\n        // \t\tdefault:default_activated\n    }\n\n    public editPins(id: number, name: string, then: (response: any) => void, error: (e: any) => void) {\n        this.callGraphql(`mutation{\n  editPin(id:` + id + `, name:\"` + name + `\"){\n    id\n    name\n  }\n}`, then, error)\n    }\n\n    public setPinDefaultState(id: number, state: boolean, then: (response: any) => void, error: (e: any) => void) {\n        this.callGraphql(`mutation{\n  setPinDefaultState(id:` + id + `, state:\"` + state + `\"){\n    id\n    name\n  }\n}`, then, error)\n    }\n\n    public getSchemas(then: (response: any) => void, error: (e: any) => void) {\n        this.callGraphql(`\nquery{\nschema{\n\tname\n\tid\n\tactive\n}\n}\n`, (e: any) => then(e.schema.sort((f: any, g: any) => f.name > g.name ? 1 : -1)), error);\n    }\n\n    private callGraphql(body: string, then: (response: any) => void, error: (err: any) => void) {\n        fetch('http://localhost:9000/graphql', {\n            method: 'post',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            }),\n            body: JSON.stringify({\"query\": body})\n        }).then((response) => {\n            return response.json();\n        }).then((response) => {\n            then((response.data))\n        }).catch((err) => {\n            error(err)\n        });\n    }\n\n}\n\n\nexport default BackendCalls\n","import * as React from 'react'\nimport {Container, Table} from 'reactstrap'\nimport Row from 'reactstrap/lib/Row'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\nimport * as toastr from 'toastr'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport BackendCalls from '../../utils/backendCalls'\n\nclass PinView extends React.Component<PinViewProps, PinViewStats> {\n\n    private backend: BackendCalls;\n\n    public constructor(props: PinViewProps) {\n        super(props)\n\n        this.state = {pins: [undefined]}\n\n        this.backend = new BackendCalls()\n        this.backend.getPins((e: any) => this.setState({pins: e}), (err: any) => console.error(err))\n        this.saveName = this.saveName.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <br/>\n            <h1>Overview of all Pins</h1>\n            <br/>\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Pinnumber</th>\n                        <th>Name</th>\n                        <th>Defaultvalue</th>\n                    </tr>\n\n                    {this.state.pins!.filter((e: any) => e !== undefined && e !== null).map((e: Pins) => <tr key={e.id}>\n                        <td>{e.id}</td>\n                        <td><EditableLabel value={e.name} onSumbit={(g: string) => this.saveName(e.id, g)}/></td>\n                        <td>{<LabelSwitch tooltip={\"Click to change\"} switchlist={[[\"Active\", \"true\"], [\"Deactivated\", \"false\"]]}\n                                          onChange={(g: string) => this.saveDefaultState(e.id, g)}/>}</td>\n                    </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private saveName(id: number, value: string) {\n        this.backend.editPins(id, value, () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n    private onError(e: Error) {\n        toastr.error(\"Change could not be made permanently. \" + e.message)\n    }\n\n    private saveDefaultState(id: number, value: string) {\n        this.backend.setPinDefaultState(id, value === \"true\", () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n}\n\ninterface PinViewProps {\n    pins?: [any]\n}\n\ninterface Pins {\n    id: number\n    name: string\n    default: number\n\n}\n\ninterface PinViewStats {\n    pins?: [any]\n}\n\nexport default PinView","import * as React from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\n\nclass OverlayModal extends React.Component<ModalProps, ModalStats> {\n    public constructor(props: ModalProps) {\n        super(props);\n        this.state = {\n            modal: false\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    public render() {\n        return (\n            <div>\n                <div className={this.props.className} onClick={this.toggle}>{this.props.buttonLabel}</div>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>{this.props.title}</ModalHeader>\n                    <ModalBody>\n                        {this.props.children}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={() => {\n                            this.toggle()\n                            this.props.onSubmit()\n                        }}>{this.props.submitText || \"Ok\"}</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.toggle}>{this.props.cancelText || \"Cancel\"}</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n\n    private toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n}\n\ninterface ModalProps {\n    title: string\n    buttonLabel: string\n    className?: string\n    cancelText?: string\n    submitText?: string\n    onSubmit: () => void\n}\n\ninterface ModalStats {\n    modal: boolean\n}\n\nexport default OverlayModal;","import * as React from 'react'\nimport {Container, Table} from 'reactstrap'\nimport Row from 'reactstrap/lib/Row'\nimport BackendCalls from '../../utils/backendCalls'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\n\nclass PinViewModal extends React.Component<PinViewProps, PinViewStats> {\n\n    constructor(props: PinViewProps) {\n        super(props)\n\n        this.state = {pins: [undefined], modified: false}\n\n        new BackendCalls().getPins((e: any) => this.setState({pins: e}), (err: any) => console.error(err), props.schema !== -1 ? props.schema : undefined)\n        this.saveName = this.saveName.bind(this)\n    }\n\n\n    public componentWillReceiveProps(nextProps: Readonly<PinViewProps>, nextContext: any): void {\n        if (nextProps.saveNow && this.state.modified) {\n            this.setState({modified: false})\n            this.props.onSave(this.props.schema, this.state.pins!)\n        }\n    }\n\n\n    public render() {\n        return <Container>\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Pinnumber</th>\n                        <th>Name</th>\n                        <th>State</th>\n                    </tr>\n\n                    {this.state.pins!.filter((e: any) => e !== undefined && e !== null).sort((a: Pin, b: Pin) => a.id > b.id ? 1 : -1).map((e: Pin) => <tr key={e.id}>\n                        <td>{e.id}</td>\n                        <td>{e.name}</td>\n                        <td>{<LabelSwitch defaultindex={e.state} tooltip={\"Click to change\"} switchlist={[[\"unmodified\", \"2\"], [\"active\", \"1\"], [\"deactivated\", \"0\"]]}\n                                          onChange={(g: string) => this.saveState(e.id, g)}/>}</td>\n                    </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private saveName(id: number, value: string) {\n        const pins: [Pin] = this.state.pins!\n        const pin: Pin = pins!.splice(pins!.findIndex((e: Pin) => e.id === id), 1)[0]\n\n        pin!.name = value\n        pins!.push(pin)\n\n        this.setState({pins, modified: true})\n    }\n\n    private saveState(id: number, value: string) {\n        const pins: [Pin] = this.state.pins!\n        const pin: Pin = pins!.splice(pins!.findIndex((e: Pin) => e.id === id), 1)[0]\n\n        pin!.state = +value\n        pins!.push(pin)\n\n        this.setState({pins, modified: true})\n    }\n\n\n}\n\ninterface PinViewProps {\n    pins?: [any]\n    schema: number\n    saveNow: boolean\n    onSave: (schema: number, pins: [any]) => void\n}\n\ninterface Pin {\n    id: number\n    name: string\n    state: number\n\n}\n\ninterface PinViewStats {\n    pins?: [any]\n    modified: boolean\n}\n\nexport default PinViewModal","import * as React from 'react'\nimport {Container, Table} from 'reactstrap'\nimport Row from 'reactstrap/lib/Row'\nimport BackendCalls from '../../utils/backendCalls'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\nimport * as toastr from 'toastr'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport './SchemaView.css'\nimport OverlayModal from '../../components/overlay/modal/OverlayModal'\nimport PinViewModal from '../Pins/PinViewModal'\n\nclass SchemaView extends React.Component<PinViewProps, PinViewStats> {\n\n    constructor(props: PinViewProps) {\n        super(props)\n\n        this.state = {schema: [undefined], hoverindex: -1, saveNow: false, newPinSchema: [undefined]}\n\n        new BackendCalls().getSchemas((e: any) => this.setState({schema: e}), (err: any) => console.error(err))\n        this.saveName = this.saveName.bind(this)\n        this.saveNewSchema = this.saveNewSchema.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <h1 className={\"h1\"}>Overview of all Schemas</h1>\n            <div className={\"text-right\"}><OverlayModal className={\"btn btn-primary add-button\"} title={\"Add a new schema\"} buttonLabel={\"Add schema\"}\n                                                        onSubmit={this.saveNewSchema}>\n                <input placeholder={\"Name\"}/>\n                <PinViewModal schema={-1} saveNow={this.state.saveNow} onSave={(i: number, pins: [any]) => this.setState({newPinSchema: pins})}/>\n            </OverlayModal></div>\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Active</th>\n                        <th/>\n                        <th/>\n                    </tr>\n\n                    {this.state.schema!.filter((e: any) => e !== undefined && e !== null).map((e: Schema) =>\n                        <tr key={e.id} className={\"schemaview\"}>\n                            <td>{e.id}</td>\n                            <td><EditableLabel value={e.name} onSumbit={(g: string) => this.saveName(e.id, g)}/></td>\n                            <td>{<LabelSwitch tooltip={\"Click to change\"} switchlist={[[\"Active\", \"true\"], [\"Deactivated\", \"false\"]]}\n                                              onChange={(g: string) => this.saveDefaultState(e.id, g)}/>}</td>\n                            <td className={\"text-right\"}>\n\n                                <OverlayModal className={\"btn btn-danger hoverbutton float-right\"} submitText={\"Yes\"} title={\"Delete the following element?\"} buttonLabel={\"Delete\"}\n                                              onSubmit={() => this.deleteSchema(e.id)}>\n                                    <h3>{e.name}</h3>\n                                </OverlayModal>\n                                <OverlayModal className={\"btn btn-warning hoverbutton float-right\"} title={e.name} buttonLabel={\"Edit\"}\n                                              onSubmit={() => this.setState({saveNow: true})} submitText={\"Save\"}>\n                                    <PinViewModal schema={e.id} saveNow={this.state.saveNow} onSave={this.saveEditedPins}/>\n                                </OverlayModal>\n                            </td>\n                        </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private saveNewSchema() {\n        this.setState({saveNow: true})\n        console.log(\"SAVE : \" + 2 + \" with value: \" + 2)\n        toastr.success(\"The changes have successfully been saved.\")\n        // @todo graphql implementieren\n    }\n\n    private saveName(id: number, value: string) {\n        console.log(\"SAVE : \" + id + \" with value: \" + value)\n        toastr.success(\"The changes have successfully been saved.\")\n        // @todo graphql implementieren\n    }\n\n    private saveDefaultState(id: number, value: string) {\n        console.log(\"SAVE : \" + id + \" with value: \" + value)\n        toastr.success(\"The changes have successfully been saved.\")\n        // @todo graphql implementieren\n    }\n\n    private deleteSchema(id: number) {\n        console.log(\"DELETE Schema : \" + id)\n        toastr.success(\"The schema was successfully delete.\")\n        // @todo graphql implementieren\n    }\n\n    private saveEditedPins(schema: number, pins: [any]) {\n        toastr.warning(\"Graphqlzeug implementieren und das vollgende schema verändern \" + this.props.schema)\n    }\n\n}\n\ninterface PinViewProps {\n    schema?: [any]\n}\n\ninterface Schema {\n    id: number\n    name: string\n    active: boolean\n\n}\n\ninterface PinViewStats {\n    schema?: [any]\n    hoverindex: number\n    saveNow: boolean\n    newPinSchema: [any]\n}\n\nexport default SchemaView","import * as React from 'react'\nimport {Container, Table} from 'reactstrap'\nimport Row from 'reactstrap/lib/Row'\nimport EditableLabel from '../../components/label/editable/EditableLabel'\nimport * as toastr from 'toastr'\nimport LabelSwitch from '../../components/label/switch/LabelSwitch'\nimport BackendCalls from '../../utils/backendCalls'\n\nclass DashboardView extends React.Component<PinViewProps, PinViewStats> {\n\n    private backend: BackendCalls;\n\n    public constructor(props: PinViewProps) {\n        super(props)\n\n        this.state = {pins: [undefined]}\n\n        this.backend = new BackendCalls()\n        this.backend.getPins((e: any) => this.setState({pins: e}), (err: any) => console.error(err))\n        this.saveName = this.saveName.bind(this)\n    }\n\n    public render() {\n        return <Container>\n            <br/>Dashboard\n            <h1>Overview of different things</h1>\n            <br/>\n            <br/>Active Pin Schema\n            <Row>\n                <Table>\n                    <tbody>\n                    <tr>\n                        <th>Pinnumber</th>\n                        <th>Name</th>\n                        <th>Defaultvalue</th>\n                    </tr>\n\n                    {this.state.pins!.filter((e: any) => e !== undefined && e !== null).map((e: Pins) => <tr key={e.id}>\n                        <td>{e.id}</td>\n                        <td><EditableLabel value={e.name} onSumbit={(g: string) => this.saveName(e.id, g)}/></td>\n                        <td>{<LabelSwitch tooltip={\"Click to change\"} switchlist={[[\"Active\", \"true\"], [\"Deactivated\", \"false\"]]}\n                                          onChange={(g: string) => this.saveDefaultState(e.id, g)}/>}</td>\n                    </tr>)}\n                    </tbody>\n                </Table>\n            </Row>\n        </Container>\n    }\n\n    private saveName(id: number, value: string) {\n        this.backend.editPins(id, value, () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n    private onError(e: Error) {\n        toastr.error(\"Change could not be made permanently. \" + e.message)\n    }\n\n    private saveDefaultState(id: number, value: string) {\n        this.backend.setPinDefaultState(id, value === \"true\", () => toastr.success(\"The changes have successfully been saved.\"), this.onError)\n    }\n\n}\n\ninterface PinViewProps {\n    pins?: [any]\n}\n\ninterface Pins {\n    id: number\n    name: string\n    default: number\n\n}\n\ninterface PinViewStats {\n    pins?: [any]\n}\n\nexport default DashboardView","import * as React from \"react\";\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport PinView from './views/Pins/PinView'\nimport SchemaView from './views/Schema/SchemaView'\nimport DashboardView from './views/Dashboard/DashboardView'\n\nclass Routing extends React.Component<{}, {}> {\n\n\n    constructor(props: {}, context: any) {\n        super(props, context)\n    }\n\n    public render() {\n        return <Router>\n            <div>\n                {/*<this.Header/>*/}\n                {this.props.children}\n\n                <Route exact={true} path=\"/\" component={DashboardView}/>\n                <Route path=\"/about\" component={this.About}/>\n                <Route path=\"/topics\" component={this.Topics}/>\n                <Route exact={true} path={\"/pins\"} component={PinView}/>\n                <Route exact={true} path={\"/schema\"} component={SchemaView}/>\n            </div>\n        </Router>\n    };\n\n    private About() {\n        return <h2>About</h2>\n    }\n\n    private Topics(match: any) {\n\n        const defaultroute = (url: any) => {\n            console.log(url)\n            return <h3>Requested Param: {url.match.params.id}</h3>\n        }\n\n        const Select = () => {\n            return <h3>Please select a topic.</h3>\n        }\n        return <div>\n            <h2>Topics</h2>\n\n            <ul>\n                <li>\n                    <Link to={`${match.match.url}/components`}>Components</Link>\n                </li>\n                <li>\n                    <Link to={`${match.match.url}/props-v-state`}>Props v. State</Link>\n                </li>\n            </ul>\n\n            <Route path={`${match.match.path}/:id`} component={defaultroute}/>\n            <Route\n                exact={true}\n                path={match.match.path}\n                render={Select}\n            />\n        </div>\n    }\n\n\n    // private Header() {\n    //     return <ul>\n    //         <li>\n    //             <Link to=\"/\">Home</Link>\n    //         </li>\n    //         <li>\n    //             <Link to=\"/about\">About</Link>\n    //         </li>\n    //         <li>\n    //             <Link to=\"/topics\">Topics</Link>\n    //         </li>\n    //     </ul>\n    // }\n}\n\nexport default Routing;\n","import * as React from 'react';\nimport {Collapse, Navbar, NavbarBrand, NavbarToggler, NavItem} from 'reactstrap'\nimport Nav from 'reactstrap/lib/Nav'\nimport {Link} from 'react-router-dom'\nimport Routing from '../routing'\n\nclass GenericView extends React.Component<{}, GenericViewStats> {\n    public constructor(props: any) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n\n    public render() {\n        return (\n            <Routing>\n                <div>\n                    <Navbar color=\"primary\" light={true} expand=\"md\">\n                        <NavbarBrand href=\"/\">HeizungsPi</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle}/>\n\n                        <Collapse isOpen={this.state.isOpen} navbar={true}>\n                            <Nav className=\"ml-auto\" navbar={true}>\n                                <NavItem>\n                                    <Link className={\"nav-link\"} to=\"/pins\">Pins</Link>\n                                </NavItem>\n                                <NavItem>\n                                    <Link className={\"nav-link\"} to=\"/schema\">Schema</Link>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Navbar>\n                </div>\n            </Routing>\n        );\n    }\n\n    private toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n}\n\n\ninterface GenericViewStats {\n    isOpen: boolean\n}\n\nexport default GenericView;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport registerServiceWorker from './utils/registerServiceWorker';\nimport './assets/bootstrap.min.css'\nimport './assets/toastr.min.css'\nimport GenericView from './views/GenericView'\n\nReactDOM.render(\n    <GenericView/>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}