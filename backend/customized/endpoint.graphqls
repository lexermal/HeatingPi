type Query {
    pins(id: Int, schema: String): [Pin]
    schema(id: String, active: Boolean): [Schema]
    currentUser: User
    temperature: Float
    settings: Settings
    temperatureLog: [TemperatureLog]
}

type Mutation {
    # Pins
    editPin(id: Int!, name: String, activeByDefault: Boolean): Pin
    # Schema
    addSchema(name: String!, mode: [InputPinMode]!, temperature: InputTemperature!): Schema
    editSchema(id: String!, name: String!, mode: [InputPinMode]!, temperature: InputTemperature!): Schema
    deleteSchema(id: String!): Schema
    activateSchema(id: String!, active: Boolean!): Schema
    # Login
    login(email: String!, password: String!): User
    logout: Boolean
    # Test
    pinTest(nr: Int!, up: Boolean!): String
    # Settings
    applySettings(settings: InputSettings!): Settings!
}

input InputPinMode {
    pinId: Int!
    mode: Int!
}
input InputTemperature {
    min: Float
    max: Float
}

input InputSettings {
    oneSchemaMode: Boolean
    multiSchemaPriority: String
}

type Pin {
    id: Int!
    name: String
    active: Boolean
    activeByDefault: Boolean
}

type PinMode {
    pin: Pin
    mode: Int
}

type Schema {
    id: String
    name: String
    active: Boolean
    running: Boolean
    temperature: Temperature
    pinModes: [PinMode]!
}

type Temperature {
    min: Float
    max: Float
}

type User {
    id: String
    name: String
    email: String
    token: String
    role: Int
}

type Settings {
    oneSchemaMode: Boolean
    multiSchemaPriority: String
}

type TemperatureLog {
    id: String
    date: String
    value: Float
    simulated: Boolean
}
